#!/usr/bin/python

# Copyright (C) 2012  tdubourg, License: see LICENSE file in same folder

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License v3
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


from signal import alarm
from signal import pause
import signal
from netmeter_config import *


# Utilities functions: 

def doNothing(arg1, arg2):
	global DBG
	if DBG:
		print "Doing nothing"
	return;

def replace_content_in_file(fname, newcontent):
	with open(fname, "w+") as f:
		f.write(str(newcontent))

def open_in_read_or_create(fname):
	try:
		f = open(fname, "r+")
	except IOError as e:
		f = open(fname, "w+")
	return f


interfaces = get_interfaces()

if DBG:
	print interfaces

signal.signal(signal.SIGALRM, doNothing)

# Updating the total value by adding the vlue of last session	
for i in interfaces:
	f_tot_rcv = open_in_read_or_create(fname_with_interface(FNAME_TOTAL_RCV, i))
	f_tot_sent = open_in_read_or_create(fname_with_interface(FNAME_TOTAL_SENT, i))

	f_sess_rcv = open_in_read_or_create(fname_with_interface(FNAME_TOTAL_SENT, i))
	f_sess_sent = open_in_read_or_create(fname_with_interface(FNAME_TOTAL_SENT, i,))

	try:
		total_rcv = int(f_tot_rcv.readline()) + int(f_sess_rcv.readline())
		total_sent = int(f_tot_sent.readline()) + int(f_sess_sent.readline())
	except ValueError:
		total_rcv = 0
		total_sent = 0

	f_tot_rcv.close()
	f_tot_sent.close()
	f_sess_sent.close()
	f_sess_rcv.close()

	# Updating the TOTAL files: 
	replace_content_in_file(fname_with_interface(FNAME_TOTAL_RCV, i), total_rcv)
	replace_content_in_file(fname_with_interface(FNAME_TOTAL_SENT, i), total_sent)

session_recv = 0
session_sent = 0
# Start the never-ending story !
while True:
	if DBG:
		print "looping"
	with open(FNAME_MONITOR) as f:
		for l in f.readlines():
			m = r_interface_line.search(l)
			if m is not None:
				interface_name = m.group(1)
				if DBG:
					print "Current interface:", interface_name
					print "Group:", m.group(2), "\n\n"
				m = r_figure.findall(m.group(2))
				if m is not None:
					session_recv = int(m[0])
					session_sent = int(m[8])
					replace_content_in_file(fname_with_interface(FNAME_SESS_RCV, interface_name), session_recv)
					replace_content_in_file(fname_with_interface(FNAME_SESS_SENT, interface_name), session_sent)
					if DBG:
						print "Received:", session_recv, "Sent:", session_sent
			elif DBG:
				print "The pattern was not matched against the line l=", l
	alarm(INTERVAL)
	pause()










